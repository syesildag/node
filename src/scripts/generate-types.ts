#!/usr/bin/env ts-node
/* Autogenerated generator: creates TypeScript interfaces from schema.graphql
   - Generates: input types, output (object) interfaces, enums, and resolver-class interfaces
   - Output file: src/generated/schema-types.ts

   Run with: npm run generate-schema-types
*/
import { readFile, writeFile } from 'fs/promises'
import path from 'path'
import {
  parse,
  buildASTSchema,
  isObjectType,
  isInputObjectType,
  isEnumType,
  isScalarType,
  isNonNullType,
  isListType,
  GraphQLSchema,
  GraphQLType,
  GraphQLNamedType,
  GraphQLObjectType,
  GraphQLInputObjectType,
  GraphQLEnumType,
} from 'graphql'

const OUT_DIR = path.join(process.cwd(), 'src', 'generated')
const OUT_FILE = path.join(OUT_DIR, 'schema-types.ts')
const SCHEMA_FILE = path.join(process.cwd(), 'schema.graphql')

const scalarMap: Record<string, string> = {
  String: 'string',
  ID: 'string',
  Int: 'number',
  Float: 'number',
  Boolean: 'boolean',
}

function unwrapType(type: GraphQLType): { ts: string; nullable: boolean } {
  // Recursively unwrap lists and non-nulls to produce a TS type string and nullability
  let nullable = true
  let t: GraphQLType = type
  if (isNonNullType(t)) {
    nullable = false
    // @ts-ignore
    t = t.ofType
  }

  let listDepth = 0
  while (isListType(t)) {
    // @ts-ignore
    t = t.ofType
    listDepth++
    if (isNonNullType(t)) {
      // inner non-null
      // @ts-ignore
      t = t.ofType
    }
  }

  const named = (t as any).name as string | undefined
  const baseTs = named && scalarMap[named] ? scalarMap[named] : named || 'any'
  let ts = baseTs
  for (let i = 0; i < listDepth; i++) ts = `${ts}[]`

  return { ts, nullable }
}

function unwrapTypeForScalars(type: GraphQLType, mode: 'input' | 'output'): { ts: string; nullable: boolean } {
  let nullable = true
  let t: GraphQLType = type
  if (isNonNullType(t)) {
    nullable = false
    // @ts-ignore
    t = t.ofType
  }

  let listDepth = 0
  while (isListType(t)) {
    // @ts-ignore
    t = t.ofType
    listDepth++
    if (isNonNullType(t)) {
      // inner non-null
      // @ts-ignore
      t = t.ofType
    }
  }

  const named = (t as any).name as string | undefined
  let baseTs = 'any'
  if (named) {
    // for built-in scalars use Scalars['Name']['input'|'output']
    if (scalarMap[named]) {
      baseTs = `Scalars['${named}']['${mode}']`
    } else {
      // otherwise use the named type directly
      baseTs = named
    }
  }

  let ts = baseTs
  for (let i = 0; i < listDepth; i++) ts = `Array<${ts}>`

  return { ts, nullable }
}

function fieldHasArgs(field: any): boolean {
  return field.args && field.args.length > 0
}

function makeArgsInterfaceName(parentName: string, fieldName: string) {
  return `${parentName}${capitalize(fieldName)}Args`
}

function capitalize(s: string) {
  return s.charAt(0).toUpperCase() + s.slice(1)
}

function getNamedTypeName(type: GraphQLType): string | null {
  let t: GraphQLType = type
  if (isNonNullType(t)) {
    // @ts-ignore
    t = t.ofType
  }
  while (isListType(t)) {
    // @ts-ignore
    t = t.ofType
    if (isNonNullType(t)) {
      // @ts-ignore
      t = t.ofType
    }
  }
  // @ts-ignore
  return (t as any).name || null
}

async function main() {
  const sdl = await readFile(SCHEMA_FILE, 'utf8')
  const ast = parse(sdl)
  const schema: GraphQLSchema = buildASTSchema(ast)
  const typeMap = schema.getTypeMap()

  const lines: string[] = []
  lines.push('// THIS FILE IS AUTO-GENERATED - DO NOT EDIT MANUALLY')
  lines.push('// Generated by src/scripts/generate-types.ts')
  lines.push('')
  lines.push("import { GraphQLResolveInfo } from 'graphql';")
  lines.push("import { Context } from '../context';")
  lines.push('')
  // helper nullable/input types to match existing generated style
  lines.push('export type Maybe<T> = T | null;')
  lines.push('export type InputMaybe<T> = Maybe<T>;')
  lines.push('')
  // small helper matching existing generated style
  lines.push('export type ResolverTypeWrapper<T> = Promise<T> | T;')
  lines.push('')
  lines.push('')

  // Emit Scalars mapping (built-ins + any custom scalars found in schema)
  const scalarNames: string[] = []
  for (const tn of Object.keys(typeMap)) {
    const t = typeMap[tn]
    if (!tn.startsWith('__') && isScalarType(t)) {
      scalarNames.push(tn)
    }
  }

  // canonical built-in ordering â€” always include built-in scalar mappings
  const builtinOrder = ['ID', 'String', 'Boolean', 'Int', 'Float']
  const customScalars = scalarNames.filter(n => !builtinOrder.includes(n))
  lines.push('/** All built-in and custom scalars, mapped to their actual values */')
  lines.push('export type Scalars = {')
  for (const sn of builtinOrder) {
    if (scalarMap[sn]) {
      const ts = scalarMap[sn]
      lines.push(`  ${sn}: { input: ${ts}; output: ${ts}; }`)
    } else {
      // fallback to any (shouldn't happen for builtins)
      lines.push(`  ${sn}: { input: any; output: any; }`)
    }
  }
  for (const sn of customScalars) {
    // custom scalars -> default to any
    lines.push(`  ${sn}: { input: any; output: any; }`)
  }
  lines.push('}')
  lines.push('')

  // Collect generated arg interfaces to avoid duplicates
  const argInterfaces: string[] = []

  // Enums first
  for (const typeName of Object.keys(typeMap).sort()) {
    const type = typeMap[typeName]
    if (!typeName.startsWith('__') && isEnumType(type)) {
      const et = type as GraphQLEnumType
      const values = et.getValues().map(v => `'${v.name}'`).join(' | ')
      lines.push(`export type ${typeName} = ${values}`)
      lines.push('')
    }
  }

  // Input types
  for (const typeName of Object.keys(typeMap).sort()) {
    const type = typeMap[typeName]
    if (!typeName.startsWith('__') && isInputObjectType(type)) {
      const it = type as GraphQLInputObjectType
        lines.push(`export type ${typeName} = {`)
      const fields = it.getFields()
      for (const fName of Object.keys(fields)) {
        const field = fields[fName]
          const { ts, nullable } = unwrapTypeForScalars(field.type as GraphQLType, 'input')
          if (nullable) {
            lines.push(`  ${fName}?: InputMaybe<${ts}>`)
          } else {
            lines.push(`  ${fName}: ${ts}`)
          }
      }
        lines.push('}')
      lines.push('')
    }
  }

  // Write output
  const content = lines.join('\n') + '\n'
  await writeFile(OUT_FILE, content, 'utf8')
  console.log(`Wrote ${OUT_FILE}`)
}

main().catch(err => {
  console.error(err)
  process.exit(1)
})
