// THIS FILE IS AUTO-GENERATED - DO NOT EDIT MANUALLY
// Generated by src/scripts/generate-types.ts

import { GraphQLResolveInfo } from 'graphql';
import { Context } from '../context';

export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;

export type ResolverTypeWrapper<T> = Promise<T> | T;


/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
}

export type Query = {
  __typename?: 'Query';
  getDie: RandomDie;
}

export type RandomDie = {
  __typename?: 'RandomDie';
  numSides: Scalars['Int']['output'];
  rollOnce: Scalars['Int']['output'];
  roll: Array<Scalars['Int']['output']>;
}

export type QueryGetDieArgs = {
  numSides?: InputMaybe<Scalars['Int']['input']>;
}

export type RandomDieRollArgs = {
  numRolls: Scalars['Int']['input'];
}

export interface QueryResolversClass {
  getDie(parent: Query, args: QueryGetDieArgs, ctx?: Context, info?: GraphQLResolveInfo): ResolverTypeWrapper<RandomDie>;
}

export interface RandomDieResolversClass {
  numSides(parent: RandomDie, args: {}, ctx?: Context, info?: GraphQLResolveInfo): ResolverTypeWrapper<Scalars['Int']['output']>;
  rollOnce(parent: RandomDie, args: {}, ctx?: Context, info?: GraphQLResolveInfo): ResolverTypeWrapper<Scalars['Int']['output']>;
  roll(parent: RandomDie, args: RandomDieRollArgs, ctx?: Context, info?: GraphQLResolveInfo): ResolverTypeWrapper<Array<Scalars['Int']['output']>>;
}

export type Resolvers = {
  Query?: Partial<QueryResolversClass>;
  RandomDie?: Partial<RandomDieResolversClass>;
};

