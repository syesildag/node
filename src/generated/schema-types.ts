// THIS FILE IS AUTO-GENERATED - DO NOT EDIT MANUALLY
// Generated by src/scripts/generate-types.ts

import { GraphQLResolveInfo } from 'graphql';
import { Context } from '../context';

export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;

export type ResolverTypeWrapper<T> = Promise<T> | T;


/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  Date: { input: any; output: any; }
}

export type Episode = 'NEWHOPE' | 'EMPIRE' | 'JEDI'

export type ReviewInput = {
  stars: Scalars['Int']['input']
  commentary?: InputMaybe<Scalars['String']['input']>
}

export type Mutation = {
  __typename?: 'Mutation';
  createReview: Maybe<Review>;
}

export type Query = {
  __typename?: 'Query';
  getDie: RandomDie;
}

export type RandomDie = {
  __typename?: 'RandomDie';
  numSides: Scalars['Int']['output'];
  rollOnce: Scalars['Int']['output'];
  roll: Array<Scalars['Int']['output']>;
}

export type Review = {
  __typename?: 'Review';
  stars: Scalars['Int']['output'];
  commentary: Maybe<Scalars['String']['output']>;
}

export type MutationCreateReviewArgs = {
  episode?: InputMaybe<Episode>;
  review: ReviewInput;
}

export type QueryGetDieArgs = {
  numSides?: InputMaybe<Scalars['Int']['input']>;
}

export type RandomDieRollArgs = {
  numRolls: Scalars['Int']['input'];
}

export interface IMutationResolver {
  createReview(args: MutationCreateReviewArgs, ctx?: Context, info?: GraphQLResolveInfo): ResolverTypeWrapper<Maybe<IReviewResolver>>;
}

export interface IQueryResolver {
  getDie(args: QueryGetDieArgs, ctx?: Context, info?: GraphQLResolveInfo): ResolverTypeWrapper<IRandomDieResolver>;
}

export interface IRandomDieResolver {
  numSides(args: {}, ctx?: Context, info?: GraphQLResolveInfo): ResolverTypeWrapper<Scalars['Int']['output']>;
  rollOnce(args: {}, ctx?: Context, info?: GraphQLResolveInfo): ResolverTypeWrapper<Scalars['Int']['output']>;
  roll(args: RandomDieRollArgs, ctx?: Context, info?: GraphQLResolveInfo): ResolverTypeWrapper<Array<Scalars['Int']['output']>>;
}

export interface IReviewResolver {
  stars(args: {}, ctx?: Context, info?: GraphQLResolveInfo): ResolverTypeWrapper<Scalars['Int']['output']>;
  commentary(args: {}, ctx?: Context, info?: GraphQLResolveInfo): ResolverTypeWrapper<Maybe<Scalars['String']['output']>>;
}

export type Resolvers = IQueryResolver & IMutationResolver;

